#+TITLE: Emacs Doom Config
#+PROPERTY: header-args :tangle ../config.el

* TABLE OF CONTENTS :toc:
- [[#how-to-use][How to use]]
- [[#preface][Preface]]
- [[#user-information][User information]]
- [[#font][Font]]
- [[#theme][Theme]]
- [[#org][Org]]
- [[#ui][UI]]
- [[#user-customization][user customization]]
  - [[#cucumber][cucumber]]
  - [[#web-mode][web mode]]
- [[#env_path][ENV_PATH]]

* How to use
=g g= goto the first line
=C-c C-v t= tangle 
* Preface
#+BEGIN_SRC emacs-lisp
;;; $DOOMDIR/config.el -*- lexical-binding: t; -*-

;; Place your private configuration here! Remember, you do not need to run 'doom
;; sync' after modifying this file!

#+END_SRC

* User information
#+BEGIN_SRC emacs-lisp
;; Some functionality uses this to identify you, e.g. GPG configuration, email
;; clients, file templates and snippets.
(setq user-full-name "patrick liu"
      user-mail-address "thinkpad560@gmail.com")
#+END_SRC

* Font
#+BEGIN_SRC emacs-lisp
;; Doom exposes five (optional) variables for controlling fonts in Doom. Here
;; are the three important ones:
;;
;; + `doom-font'
;; + `doom-variable-pitch-font'
;; + `doom-big-font' -- used for `doom-big-font-mode'; use this for
;;   presentations or streaming.
;;
;; They all accept either a font-spec, font string ("Input Mono-12"), or xlfd
;; font string. You generally only need these two:
;;(setq doom-font (font-spec :family "monospace" :size 14)
;;      doom-big-font (font-spec :family "monospace" :size 18))
(setq doom-font (font-spec :family "SauceCodePro Nerd Font" :size 15)
      doom-variable-pitch-font (font-spec :family "SauceCodePro Nerd Font" :size 15)
      doom-big-font (font-spec :family "SauceCodePro Nerd Font" :size 18)
)
#+END_SRC

* Theme
#+BEGIN_SRC emacs-lisp
;; There are two ways to load a theme. Both assume the theme is installed and
;; available. You can either set `doom-theme' or manually load a theme with the
;; `load-theme' function. This is the default:
;; (setq doom-theme 'doom-one)
;; (setq doom-theme 'solarized-dark)
(setq doom-theme 'doom-nord)
;; (setq doom-theme 'planet)
#+END_SRC

* Org
#+BEGIN_SRC emacs-lisp
;; If you use `org' and don't want your org files in the default location below,
;; change `org-directory'. It must be set before org loads!
(after! org
  ;;  (add-load-path! "user-config-org")
  ;; org-babel-tangle
  (load! "org-mode.el")
  )
#+END_SRC
* UI
#+BEGIN_SRC emacs-lisp
;; This determines the style of line numbers in effect. If set to `nil', line
;; numbers are disabled. For relative line numbers, set this to `relative'.
(setq display-line-numbers-type 'relative)

;; Whether display icons in the mode-line.
;; While using the server mode in GUI, should set the value explicitly.
(setq doom-modeline-icon (display-graphic-p))

;; Whether display the icon for `major-mode'. It respects `doom-modeline-icon'.
(setq doom-modeline-major-mode-icon t)

;; Whether display the colorful icon for `major-mode'.
;; It respects `all-the-icons-color-icons'.
(setq doom-modeline-major-mode-color-icon t)

;; Whether display the icon for the buffer state. It respects `doom-modeline-icon'.
;; (setq doom-modeline-buffer-state-icon t)

;; Whether display the modification icon for the buffer.
;; It respects `doom-modeline-icon' and `doom-modeline-buffer-state-icon'.
;; (setq doom-modeline-buffer-modification-icon t)

;; Whether to use unicode as a fallback (instead of ASCII) when not using icons.
;; (setq doom-modeline-unicode-fallback nil)

;; Whether display the minor modes in the mode-line.
;; (setq doom-modeline-minor-modes nil)
#+END_SRC
* user customization
#+BEGIN_SRC emacs-lisp
;; Here are some additional functions/macros that could help you configure Doom:
;;
;; - `load!' for loading external *.el files relative to this one
;; - `use-package' for configuring packages
;; - `after!' for running code after a package has loaded
;; - `add-load-path!' for adding directories to the `load-path', relative to
;;   this file. Emacs searches the `load-path' when you load packages with
;;   `require' or `use-package'.
;; - `map!' for binding new keys
;;
;; To get information about any of these functions/macros, move the cursor over
;; the highlighted symbol at press 'K' (non-evil users must press 'C-c g k').
;; This will open documentation for it, including demos of how they are used.
;;
;; You can also try 'gd' (or 'C-c g d') to jump to their definition and see how
;; they are implemented.
;; user customization
(evil-set-initial-state 'dired-mode 'emacs)
(setq projectile-project-search-path '("~/org/" "~/code.dev/"))

#+END_SRC

** cucumber
#+BEGIN_SRC emacs-lisp
;; cucumber
(require 'feature-mode)
(add-to-list 'auto-mode-alist '("\.feature$" . feature-mode))
#+END_SRC
** web mode
#+BEGIN_SRC emacs-lisp
;; web 2 spaces indent
(defun my-web-mode-hook ()
  ;; Hooks for Web mode.
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2)
)
(add-hook 'web-mode-hook  'my-web-mode-hook)
#+END_SRC

* ENV_PATH
#+begin_src emacs-lisp
(when (memq window-system '(mac ns x))
  (exec-path-from-shell-initialize))
#+end_src
# ** latex
# #+begin_src emacs-lisp
# ;; for latex command when only install basictex
# (setenv "PATH"
#         (concat
#          "/Library/TeX/texbin" ":"
#          "/opt/homebrew/bin" ":"
#          "/Users/liuxin/.asdf/shims" ":"
#          (getenv "PATH")
#          )
#         )
# #+end_src
